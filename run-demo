#! /usr/bin/env bash
#
# Recreates the PhantomJS 2.1.1 WebSocket crash on Windows Subsystem for Linux
#
# Usage:
#   run-demo [--no-ws|--debug|--strace]
#
# Flags:
#   --no-ws         Run http-server instead of live-server to disable WebSockets
#   --debug         Run PhantomJS in debug mode
#   --strace        Run PhantomJS under strace
#
# To recreate the failure, an empty index.html page is served via `live-server`,
# which injects JavaScript to open a WebSocket back to the server in order to
# notify the browser of updates.
#
# Only one of --debug or --strace may be specified at a time.

declare DEMO_ROOTDIR="${0%/*}"
declare NO_WS
declare PHANTOMJS_DEBUG
declare STRACE_PHANTOMJS
declare PHANTOMJS='node_modules/phantomjs-prebuilt/lib/phantom/bin/phantomjs'
declare PHANTOMJS_CMD=("$PHANTOMJS")

if ! cd "$DEMO_ROOTDIR"; then
  printf "Couldn't change to %s; exiting.\n" "$DEMO_ROOTDIR" >&2
  exit 1
fi
DEMO_ROOTDIR="$PWD"

if ! command -v node >/dev/null; then
  printf 'Install Node.js to run this demo: https://nodejs.org\n' >&2
  exit 1
elif [[ ! -d './node_modules' ]] && ! npm install; then
  printf '`npm install` failed; exiting.\n' >&2
  exit 1
fi

while [[ "$#" -ne '0' ]]; do
  case "$1" in
  --no-ws)
    NO_WS='true'
    ;;
  --debug)
    PHANTOMJS_DEBUG='true'
    PHANTOMJS_CMD=("$PHANTOMJS" '--debug=true')
    ;;
  --strace)
    STRACE_PHANTOMJS='true'
    PHANTOMJS_CMD=('strace' "$PHANTOMJS")
    ;;
  *)
    printf 'Unknown argument: %s\n' "$1" >&2
    exit 1
  esac
  shift
done

if [[ "$PHANTOMJS_DEBUG" == 'true' && "$STRACE_PHANTOMJS" == 'true' ]]; then
  printf 'Only one of --debug or --strace can be specified.\n' >&2
  exit 1
fi

set -m

if [[ "$NO_WS" == 'true' ]]; then
  node_modules/.bin/http-server . &
else
  node_modules/.bin/live-server --no-browser --ignore=logs . &
fi
SERVER_PID="$!"
trap "kill $SERVER_PID; set +m" EXIT
sleep 2

PHANTOMJS_CMD+=("$DEMO_ROOTDIR/visit-site.js")
printf 'Running PhantomJS as: %s\n' "${PHANTOMJS_CMD[*]}"
"${PHANTOMJS_CMD[@]}"
